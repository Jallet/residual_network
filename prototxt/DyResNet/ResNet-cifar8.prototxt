name : "ResNet-cifar"
layer {
  name: "conv4_1"
  type: "Data"
  top: "conv4_1"
  top: "label"
  include {
    phase: TRAIN
  }
  transform_param {
    mirror : true
  }
  data_param {
    source: "data/DyResNet-cifar8/DyResNet_conv4_1_train_lmdb"
    batch_size: 250
    backend: LMDB
  }
}
layer {
  name: "conv4_1"
  type: "Data"
  top: "conv4_1"
  top: "label"
  include {
    phase: TEST
  }
  data_param {
    source: "data/DyResNet-cifar8/DyResNet_conv4_1_test_lmdb"
    batch_size : 50
    backend: LMDB
  }
}

layer {
	bottom: "conv4_1"
	top: "conv4_1"
	name: "conv4_1_relu"
	type: "ReLU"
}
layer {
    name : "conv4_2a"
    type : "Convolution"
    bottom : "conv4_1"
    top : "conv4_2a"
    param {
      lr_mult : 1
    }
    param {
      lr_mult : 2
    }
    convolution_param {
        weight_filler {
            type : "msra"
        }
        bias_filler {
            type : "constant"
            value : 0
        }
        num_output : 64
        kernel_size : 3
        pad : 1
        stride : 1
    }
}
layer {
	bottom: "conv4_2a"
	top: "conv4_2a"
	name: "bn_conv4_2a"
	type: "BatchNorm"
    param {
        lr_mult : 0
    }
    param {
        lr_mult : 0
    }
    param {
        lr_mult : 0
    }
}

layer {
	bottom: "conv4_2a"
	top: "conv4_2a"
	name: "scale_conv4_2a"
	type: "Scale"
    param {
        lr_mult : 1
    }
    param {
        lr_mult : 2
    }
	scale_param {
		bias_term: true
	}
}
layer {
	bottom: "conv4_2a"
	top: "conv4_2a"
	name: "conv4_2a_relu"
	type: "ReLU"
}
layer {
    name : "conv4_2b"
    type : "Convolution"
    bottom : "conv4_2a"
    top : "conv4_2b"
    param {
      lr_mult : 1
    }
    param {
      lr_mult : 2
    }
    convolution_param {
        weight_filler {
            type : "msra"
        }
        bias_filler {
            type : "constant"
            value : 0
        }
        num_output : 64
        kernel_size : 3
        pad : 1
        stride : 1
    }
}
layer {
	bottom: "conv4_2b"
	top: "conv4_2b"
	name: "bn_conv4_2b"
	type: "BatchNorm"
    param {
        lr_mult : 0
    }
    param {
        lr_mult : 0
    }
    param {
        lr_mult : 0
    }
}

layer {
	bottom: "conv4_2b"
	top: "conv4_2b"
	name: "scale_conv4_2b"
	type: "Scale"
    param {
        lr_mult : 1
    }
    param {
        lr_mult : 2
    }
	scale_param {
		bias_term: true
	}
}

layer {
    type : "Eltwise"
    name : "conv4_2"
    top : "conv4_2"
    bottom : "conv4_1"
    bottom : "conv4_2b"
}

layer {
	bottom: "conv4_2"
	top: "conv4_2"
	name: "conv4_2_relu"
	type: "ReLU"
}
layer {
    name : "conv4_3a"
    type : "Convolution"
    bottom : "conv4_2"
    top : "conv4_3a"
    param {
      lr_mult : 1
    }
    param {
      lr_mult : 2
    }
    convolution_param {
        weight_filler {
            type : "msra"
        }
        bias_filler {
            type : "constant"
            value : 0
        }
        num_output : 64
        kernel_size : 3
        pad : 1
        stride : 1
    }
}
layer {
	bottom: "conv4_3a"
	top: "conv4_3a"
	name: "bn_conv4_3a"
	type: "BatchNorm"
    param {
        lr_mult : 0
    }
    param {
        lr_mult : 0
    }
    param {
        lr_mult : 0
    }
}

layer {
	bottom: "conv4_3a"
	top: "conv4_3a"
	name: "scale_conv4_3a"
	type: "Scale"
    param {
        lr_mult : 1
    }
    param {
        lr_mult : 2
    }
	scale_param {
		bias_term: true
	}
}
layer {
	bottom: "conv4_3a"
	top: "conv4_3a"
	name: "conv4_3a_relu"
	type: "ReLU"
}
layer {
    name : "conv4_3b"
    type : "Convolution"
    bottom : "conv4_3a"
    top : "conv4_3b"
    param {
      lr_mult : 1
    }
    param {
      lr_mult : 2
    }
    convolution_param {
        weight_filler {
            type : "msra"
        }
        bias_filler {
            type : "constant"
            value : 0
        }
        num_output : 64
        kernel_size : 3
        pad : 1
        stride : 1
    }
}
layer {
	bottom: "conv4_3b"
	top: "conv4_3b"
	name: "bn_conv4_3b"
	type: "BatchNorm"
    param {
        lr_mult : 0
    }
    param {
        lr_mult : 0
    }
    param {
        lr_mult : 0
    }
}

layer {
	bottom: "conv4_3b"
	top: "conv4_3b"
	name: "scale_conv4_3b"
	type: "Scale"
    param {
        lr_mult : 1
    }
    param {
        lr_mult : 2
    }
	scale_param {
		bias_term: true
	}
}

layer {
    type : "Eltwise"
    name : "conv4_3"
    top : "conv4_3"
    bottom : "conv4_2"
    bottom : "conv4_3b"
}

layer {
	bottom: "conv4_3"
	top: "conv4_3"
	name: "conv4_3_relu"
	type: "ReLU"
}

layer {
    name : "global_pool"
    bottom : "conv4_3"
#    bottom : "conv4_1b"
    top : "global_pool"
    type : "Pooling"
    pooling_param {
        kernel_size : 8
        stride : 8
        pool : AVE
    }
}

layer {
    name : "ip"
    bottom : "global_pool"
    top : "ip"
    type : "InnerProduct"
    param {
        lr_mult : 1
    }
    param {
        lr_mult : 2
    }
    inner_product_param {
        num_output : 10
    }
}

layer {
    name : "accuracy"
    type : "Accuracy"
    bottom : "ip"
    bottom : "label"
    top : "accuracy"
}

layer {
    name : "conv4_3b_rc"
    bottom : "conv4_3b"
    top : "conv4_3b_rc"
    type : "Deconvolution"
    param {
        lr_mult : 1
    }
    param {
        lr_mult : 2
    }
    convolution_param {
        weight_filler {
            type : "msra"
        }
        bias_filler {
            type : "constant"
            value : 0
        }
        num_output : 64
        kernel_size : 3
        pad : 1
        stride : 1
    }
}
layer {
    name : "loss_classify"
    bottom : "ip"
    bottom : "label"
    top : "loss_classify"
    type : "SoftmaxWithLoss"
    loss_weight : 1
}

layer {
    name : "loss_rc"
    bottom : "conv4_3b_rc"
    bottom : "conv4_2b"
    top : "loss_rc"
    type : "EuclideanLoss"
    loss_weight : 1e-4
}

layer {
    name : "loss"
    bottom : "loss_classify"
    bottom : "loss_rc"
    top : "loss"
    type : "Eltwise"
}
